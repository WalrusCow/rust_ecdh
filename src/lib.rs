extern crate num;
extern crate num_traits;
extern crate crypto_int;

mod field;
mod elliptic;

#[cfg(test)]
mod tests {
    use field;
    use elliptic::{Point, EllipticCurve};
    use crypto_int::U512;

    #[test]
    fn it_works() {
        let p = U512::from_bytes_be(vec![
            0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
            0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72,
            0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28,
            0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77,
        ]);
        let gf = field::GF::new(p);

        let a = U512::from_bytes_be(vec![
            0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57,
            0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7,
            0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C,
            0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9,
        ]);
        let b = U512::from_bytes_be(vec![
            0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44,
            0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF,
            0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE,
            0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6,
        ]);

        let curve = EllipticCurve::new(a, b, gf);

        let x = U512::from_bytes_be(vec![
            0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB,
            0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF,
            0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2,
            0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62,
        ]);
        let y = U512::from_bytes_be(vec![
            0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD,
            0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9,
            0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54,
            0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97,
        ]);
        let generator = curve.pt(x, y);

        let order = U512::from_bytes_be(vec![
            0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
            0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71,
            0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7,
            0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7,
        ]);

        println!("Hey");
        println!("{}", generator * order);
    }

    #[test]
    fn basic_addition() {
        let f = field::GF::new(U512::from_u64(11));
        let e = EllipticCurve::new(
            U512::from_u64(1),
            U512::from_u64(6),
            f,
        );
        let p1 = e.pt(U512::from_u64(2), U512::from_u64(4));
        let p2 = e.pt(U512::from_u64(5), U512::from_u64(2));

        let e1 = e.pt(U512::from_u64(2), U512::from_u64(7));
        assert_eq!(p1 + p2, e1);

        let e2 = e.pt(U512::from_u64(5), U512::from_u64(9));
        assert_eq!(p1 + p1, e2);
    }
}
